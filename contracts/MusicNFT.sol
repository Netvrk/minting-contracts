// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts/utils/introspection/IERC165.sol";
import "@openzeppelin/contracts/token/common/ERC2981.sol";
import "@openzeppelin/contracts/interfaces/IERC2981.sol";
import "./interfaces/IMusicNFT.sol";
import "./interfaces/INFT.sol";

/**
 * @title MusicNFT
 * @dev This contract implements an upgradeable ERC721 token with enumerable, access control, and royalty features.
 * It also supports UUPS proxy for upgradeability and includes presale and sale functionalities.
 */
contract MusicNFT is
    IMusicNFT,
    ERC2981,
    ContextUpgradeable,
    AccessControlUpgradeable,
    ReentrancyGuardUpgradeable,
    UUPSUpgradeable,
    ERC721EnumerableUpgradeable
{
    using AddressUpgradeable for address;
    using MerkleProofUpgradeable for bytes32[];

    // Role for managing the contract
    bytes32 public constant MANAGER_ROLE = keccak256("MANAGER_ROLE");

    // Treasury address for receiving funds
    address internal _treasury;
    // Total revenue generated by the contract
    uint256 internal _totalRevenue;
    // Merkle root for whitelist verification
    bytes32 private _merkleRoot;
    // Base URI for token metadata
    string private _tokenBaseURI;
    // Contract URI for contract-level metadata
    string private _contractURI;

    // Flags for presale and sale status
    bool private _presaleActive;
    bool private _saleActive;

    // Sales parameters
    uint256 private _maxTracks;
    uint256 private _tracksPerAlbum;
    uint256 private _maxAlbumsPerTx;
    uint256 private _maxPerWallet;
    uint256 private _startIndex;
    uint256 private _price;
    uint256 private _presaleStart;
    uint256 private _presaleEnd;

    // Mapping to track minted tracks per address
    mapping(address => uint256) private _mintedTracks;

    // Avatar NFT contract
    INFT private _avatarNFT;

    /**
    ////////////////////////////////////////////////////
    // Admin Functions 
    ///////////////////////////////////////////////////
    */

    /**
     * @dev Initializes the contract by setting the initial values and roles.
     * @param name_ The name of the token.
     * @param symbol_ The symbol of the token.
     * @param baseURI_ The base URI for token metadata.
     * @param treasury_ The address of the treasury.
     * @param avatarNFTAddress_ The address of the avatar NFT contract.
     * @param manager The address of the manager.
     */
    function initialize(
        string memory name_,
        string memory symbol_,
        string memory baseURI_,
        address treasury_,
        INFT avatarNFTAddress_,
        address manager
    ) public initializer {
        require(
            avatarNFTAddress_.supportsInterface(type(INFT).interfaceId),
            "INVALID_AVATAR_NFT_ADDRESS"
        );

        __ERC721_init(name_, symbol_);
        __ERC721Enumerable_init();
        __UUPSUpgradeable_init();
        __Context_init_unchained();
        __ReentrancyGuard_init_unchained();
        __AccessControl_init_unchained();

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setupRole(MANAGER_ROLE, manager);

        _tokenBaseURI = baseURI_;
        _treasury = treasury_;
        _avatarNFT = avatarNFTAddress_;
        _presaleActive = false;
        _saleActive = false;
        _startIndex = 1;
        _tracksPerAlbum = 12;
        _maxAlbumsPerTx = 3;
    }

    /**
     * @dev Sets the merkle root for the presale whitelist.
     * @param merkleRoot_ The new merkle root.
     */
    function setMerkleRoot(
        bytes32 merkleRoot_
    ) external virtual onlyRole(MANAGER_ROLE) {
        _merkleRoot = merkleRoot_;
    }

    /**
     * @dev Sets the treasury address.
     * @param newTreaasury_ The new treasury address.
     */
    function setTreasury(
        address newTreaasury_
    ) external virtual onlyRole(DEFAULT_ADMIN_ROLE) {
        _treasury = newTreaasury_;
    }

    /**
     * @dev Sets the base URI for the token metadata.
     * @param newBaseURI_ The new base URI.
     */
    function setBaseURI(
        string memory newBaseURI_
    ) external virtual onlyRole(MANAGER_ROLE) {
        _tokenBaseURI = newBaseURI_;
    }

    /**
     * @dev Sets the contract URI.
     * @param newContractURI The new contract URI.
     */
    function setContractURI(
        string memory newContractURI
    ) external virtual onlyRole(MANAGER_ROLE) {
        _contractURI = newContractURI;
    }

    /**
     * @dev Sets the price for the presale/sale.
     * @param newPrice_ The new price.
     */
    function setPrice(
        uint256 newPrice_
    ) external virtual onlyRole(MANAGER_ROLE) {
        _price = newPrice_;
    }

    /**
     * @dev Sets the default royalty for the contract.
     * @param receiver The address of the royalty receiver.
     * @param royalty The royalty percentage (in basis points).
     */
    function setDefaultRoyalty(
        address receiver,
        uint96 royalty
    ) external virtual onlyRole(DEFAULT_ADMIN_ROLE) {
        _setDefaultRoyalty(receiver, royalty);
    }

    /**
     * @dev Starts the presale.
     * @param maxAlbums_ The maximum number of albums.
     * @param maxAlbumsPerWallet_ The maximum number of albums per wallet.
     * @param newPrice_ The new price per album.
     * @param presaleStartTime_ The start time of the presale.
     * @param presaleEndTime_ The end time of the presale.
     */
    function startPresale(
        uint256 maxAlbums_,
        uint256 maxAlbumsPerWallet_,
        uint256 newPrice_,
        uint256 presaleStartTime_,
        uint256 presaleEndTime_
    ) external virtual onlyRole(MANAGER_ROLE) {
        require(presaleStartTime_ < presaleEndTime_, "PRESALE_START_AFTER_END");
        require(presaleStartTime_ > block.timestamp, "PRESALE_START_IN_PAST");
        require(
            (maxAlbums_ * _tracksPerAlbum) > _maxTracks,
            "SMALLER_MAX_ALBUMS"
        );
        require(maxAlbumsPerWallet_ > 0, "SMALLER_MAX_ALBUMS_PER_WALLET");

        _maxTracks = maxAlbums_ * _tracksPerAlbum;
        _maxPerWallet = maxAlbumsPerWallet_ * _tracksPerAlbum;
        _price = newPrice_;
        _presaleStart = presaleStartTime_;
        _presaleEnd = presaleEndTime_;
        _presaleActive = true;
        _saleActive = false;
    }

    /**
     * @dev Extends the presale period.
     * @param presaleEndTime_ The new presale end time.
     */
    function extendPresale(
        uint256 presaleEndTime_
    ) external virtual onlyRole(MANAGER_ROLE) {
        require(presaleEndTime_ > block.timestamp, "PRESALE_ENDS_IN_PAST");
        require(presaleEndTime_ > _presaleEnd, "PRESALE_ENDS_BEFORE_LAST_END");
        _presaleEnd = presaleEndTime_;
    }

    /**
     * @dev Starts the sale.
     * @param maxAlbums_ The maximum number of albums.
     * @param maxAlbumsPerWallet_ The maximum number of albums per wallet.
     * @param newPrice_ The new price per album.
     */
    function startSale(
        uint256 maxAlbums_,
        uint256 maxAlbumsPerWallet_,
        uint256 newPrice_
    ) external virtual onlyRole(MANAGER_ROLE) {
        require(
            (maxAlbums_ * _tracksPerAlbum) > _maxTracks,
            "SMALLER_MAX_ALBUMS"
        );
        require(maxAlbumsPerWallet_ > 0, "SMALLER_MAX_ALBUMS_PER_WALLET");

        _maxTracks = maxAlbums_ * _tracksPerAlbum;
        _maxPerWallet = maxAlbumsPerWallet_ * _tracksPerAlbum;
        _price = newPrice_;
        _presaleActive = false;
        _saleActive = true;
    }

    /**
     * @dev Stops the sale.
     */
    function stopSale() external virtual onlyRole(MANAGER_ROLE) {
        _saleActive = false;
    }

    /**
     * @dev Withdraws all the contract's balance to the treasury.
     */
    function withdraw() external virtual nonReentrant {
        require(address(this).balance > 0, "ZERO_BALANCE");
        uint256 balance = address(this).balance;
        AddressUpgradeable.sendValue(payable(_treasury), balance);
    }

    /**
    ////////////////////////////////////////////////////
    // Public Functions 
    ///////////////////////////////////////////////////
    */

    /**
     * @dev Mints albums during the presale.
     * @param albums_ The number of albums to mint.
     * @param proof_ The merkle proof for whitelist verification.
     */
    function presaleMint(
        uint256 albums_,
        bytes32[] calldata proof_
    ) external payable virtual nonReentrant {
        require(_merkleRoot != "", "MERKLE_ROOT_NOT_SET");
        require(_presaleActive, "PRESALE_NOT_ACTIVE");
        require(_presaleStart < block.timestamp, "PRESALE_NOT_STARTED");
        require(block.timestamp < _presaleEnd, "PRESALE_ENDED");
        require(
            _maxTracks > 0
                ? totalSupply() + (_tracksPerAlbum * albums_) <= _maxTracks
                : true,
            "MAX_AMOUNT_EXCEEDED"
        );
        require(
            _mintedTracks[_msgSender()] + (_tracksPerAlbum * albums_) <=
                _maxPerWallet,
            "MAX_PER_WALLET_EXCEEDED"
        );
        require(
            MerkleProofUpgradeable.verify(
                proof_,
                _merkleRoot,
                keccak256(abi.encodePacked(_msgSender()))
            ),
            "NOT_WHITELISTED"
        );

        _mintAlbum(_msgSender(), albums_);
    }

    /**
     * @dev Mints albums during the sale.
     * @param albums_ The number of albums to mint.
     */
    function mint(uint256 albums_) external payable virtual nonReentrant {
        require(_saleActive, "SALE_NOT_ACTIVE");
        require(
            _maxTracks > 0
                ? totalSupply() + (_tracksPerAlbum * albums_) <= _maxTracks
                : true,
            "MAX_AMOUNT_EXCEEDED"
        );
        require(
            _mintedTracks[_msgSender()] + (_tracksPerAlbum * albums_) <=
                _maxPerWallet,
            "MAX_PER_WALLET_EXCEEDED"
        );
        _mintAlbum(_msgSender(), albums_);
    }

    /**
    ////////////////////////////////////////////////////
    // View only functions
    ///////////////////////////////////////////////////
    */

    /**
     * @dev Returns the number of tracks per album.
     */
    function tracksPerAlbum() external view virtual returns (uint256) {
        return _tracksPerAlbum;
    }

    /**
     * @dev Returns the maximum number of tracks on sale.
     */
    function maxTracksOnSale() external view virtual returns (uint256) {
        return _maxTracks;
    }

    /**
     * @dev Returns the maximum number of albums on sale.
     */
    function maxAlbumsOnSale() external view virtual returns (uint256) {
        return _maxTracks / _tracksPerAlbum;
    }

    /**
     * @dev Returns the maximum number of albums per wallet.
     */
    function maxAlbumsPerWallet() external view virtual returns (uint256) {
        return _maxPerWallet / _tracksPerAlbum;
    }

    /**
     * @dev Returns the maximum number of albums per transaction.
     */
    function maxAlbumsPerTx() external view virtual returns (uint256) {
        return _maxAlbumsPerTx;
    }

    /**
     * @dev Returns the price per album.
     */
    function price() external view virtual returns (uint256) {
        return _price;
    }

    /**
     * @dev Returns whether the presale is active.
     */
    function presaleActive() external view virtual returns (bool) {
        return
            _presaleActive &&
            _presaleStart < block.timestamp &&
            _presaleEnd > block.timestamp;
    }

    /**
     * @dev Returns whether the sale is active.
     */
    function saleActive() external view virtual returns (bool) {
        return _saleActive;
    }

    /**
     * @dev Returns the start time of the presale.
     */
    function presaleStart() external view virtual returns (uint256) {
        return _presaleStart;
    }

    /**
     * @dev Returns the end time of the presale.
     */
    function presaleEnd() external view virtual returns (uint256) {
        return _presaleEnd;
    }

    /**
     * @dev Returns the number of tracks minted by a user.
     * @param user The address of the user.
     */
    function tracksMinted(
        address user
    ) external view virtual returns (uint256) {
        return _mintedTracks[user];
    }

    /**
     * @dev Returns the number of albums minted by a user.
     * @param user The address of the user.
     */
    function albumsMinted(
        address user
    ) external view virtual returns (uint256) {
        return _mintedTracks[user] / _tracksPerAlbum;
    }

    /**
     * @dev Returns the total number of albums minted.
     */
    function totalAlbumsMinted() public view returns (uint256) {
        return _startIndex / _tracksPerAlbum;
    }

    /**
     * @dev Returns the treasury address.
     */
    function treasury() external view virtual returns (address) {
        return _treasury;
    }

    /**
     * @dev Returns the total revenue generated by the contract.
     */
    function totalRevenue() external view virtual returns (uint256) {
        return _totalRevenue;
    }

    /**
     * @dev Returns the contract URI.
     */
    function contractURI() external view virtual returns (string memory) {
        return _contractURI;
    }

    /**
    ////////////////////////////////////////////////////
    // Internal Functions 
    ///////////////////////////////////////////////////
    */

    /**
     * @dev Internal function to mint albums.
     * @param sender The address of the sender.
     * @param albums The number of albums to mint.
     */
    function _mintAlbum(address sender, uint256 albums) internal {
        require(albums <= _maxAlbumsPerTx, "TOO_MANY_ALBUMS");
        require(_price * albums == msg.value, "PRICE_MISMATCH");
        uint256 totalMints = albums * _tracksPerAlbum;

        for (uint256 idx = _startIndex; idx < _startIndex + totalMints; idx++) {
            _safeMint(sender, idx);
            emit Minted(idx, sender);
        }

        _totalRevenue = _totalRevenue + msg.value;
        _mintedTracks[sender] = _mintedTracks[sender] + totalMints;
        _startIndex = _startIndex + totalMints;

        // Mint avatar for user
        for (uint256 idx = 0; idx < albums; idx++) {
            _avatarNFT.mintItem(sender);
        }
    }

    /**
     * @dev Returns the base URI for the token metadata.
     */
    function _baseURI() internal view virtual override returns (string memory) {
        return _tokenBaseURI;
    }

    /**
     * @dev Burns a token.
     * @param tokenId The ID of the token to burn.
     */
    function _burn(uint256 tokenId) internal virtual override {
        super._burn(tokenId);
        _resetTokenRoyalty(tokenId);
    }

    /**
    ////////////////////////////////////////////////////
    // Override Functions 
    ///////////////////////////////////////////////////
    */
    /**
     * @dev Checks if the contract supports a given interface.
     * @param interfaceId The ID of the interface to check.
     */
    function supportsInterface(
        bytes4 interfaceId
    )
        public
        view
        virtual
        override(
            IERC165,
            ERC2981,
            ERC721EnumerableUpgradeable,
            AccessControlUpgradeable
        )
        returns (bool)
    {
        if (interfaceId == type(IERC2981).interfaceId) {
            return true;
        }
        if (interfaceId == type(IMusicNFT).interfaceId) {
            return true;
        }
        return super.supportsInterface(interfaceId);
    }

    /**
     * @dev Hook that is called before any token transfer.
     * @param from The address of the sender.
     * @param to The address of the receiver.
     * @param tokenId The ID of the token being transferred.
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721EnumerableUpgradeable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev Authorizes an upgrade to the contract.
     * @param newImplementation The address of the new implementation.
     */
    function _authorizeUpgrade(
        address newImplementation
    ) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}
}
